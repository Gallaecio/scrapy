# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008â€“2020, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy 2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-03 20:13+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../topics/loaders.rst:5
msgid "Item Loaders"
msgstr ""

#: ../../topics/loaders.rst:10
msgid "Item Loaders provide a convenient mechanism for populating scraped :ref:`Items <topics-items>`. Even though Items can be populated using their own dictionary-like API, Item Loaders provide a much more convenient API for populating them from a scraping process, by automating some common tasks like parsing the raw extracted data before assigning it."
msgstr ""

#: ../../topics/loaders.rst:16
msgid "In other words, :ref:`Items <topics-items>` provide the *container* of scraped data, while Item Loaders provide the mechanism for *populating* that container."
msgstr ""

#: ../../topics/loaders.rst:20
msgid "Item Loaders are designed to provide a flexible, efficient and easy mechanism for extending and overriding different field parsing rules, either by spider, or by source format (HTML, XML, etc) without becoming a nightmare to maintain."
msgstr ""

#: ../../topics/loaders.rst:25
msgid "Using Item Loaders to populate items"
msgstr ""

#: ../../topics/loaders.rst:27
msgid "To use an Item Loader, you must first instantiate it. You can either instantiate it with a dict-like object (e.g. Item or dict) or without one, in which case an Item is automatically instantiated in the Item Loader ``__init__`` method using the Item class specified in the :attr:`ItemLoader.default_item_class` attribute."
msgstr ""

#: ../../topics/loaders.rst:33
msgid "Then, you start collecting values into the Item Loader, typically using :ref:`Selectors <topics-selectors>`. You can add more than one value to the same item field; the Item Loader will know how to \"join\" those values later using a proper processing function."
msgstr ""

#: ../../topics/loaders.rst:38
msgid "Collected data is internally stored as lists, allowing to add several values to the same field. If an ``item`` argument is passed when creating a loader, each of the item's values will be stored as-is if it's already an iterable, or wrapped with a list if it's a single value."
msgstr ""

#: ../../topics/loaders.rst:44
msgid "Here is a typical Item Loader usage in a :ref:`Spider <topics-spiders>`, using the :ref:`Product item <topics-items-declaring>` declared in the :ref:`Items chapter <topics-items>`::"
msgstr ""

#: ../../topics/loaders.rst:60
msgid "By quickly looking at that code, we can see the ``name`` field is being extracted from two different XPath locations in the page:"
msgstr ""

#: ../../topics/loaders.rst:63
msgid "``//div[@class=\"product_name\"]``"
msgstr ""

#: ../../topics/loaders.rst:64
msgid "``//div[@class=\"product_title\"]``"
msgstr ""

#: ../../topics/loaders.rst:66
msgid "In other words, data is being collected by extracting it from two XPath locations, using the :meth:`~ItemLoader.add_xpath` method. This is the data that will be assigned to the ``name`` field later."
msgstr ""

#: ../../topics/loaders.rst:70
msgid "Afterwards, similar calls are used for ``price`` and ``stock`` fields (the latter using a CSS selector with the :meth:`~ItemLoader.add_css` method), and finally the ``last_update`` field is populated directly with a literal value (``today``) using a different method: :meth:`~ItemLoader.add_value`."
msgstr ""

#: ../../topics/loaders.rst:75
msgid "Finally, when all data is collected, the :meth:`ItemLoader.load_item` method is called which actually returns the item populated with the data previously extracted and collected with the :meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css`, and :meth:`~ItemLoader.add_value` calls."
msgstr ""

#: ../../topics/loaders.rst:83
msgid "Input and Output processors"
msgstr ""

#: ../../topics/loaders.rst:85
msgid "An Item Loader contains one input processor and one output processor for each (item) field. The input processor processes the extracted data as soon as it's received (through the :meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css` or :meth:`~ItemLoader.add_value` methods) and the result of the input processor is collected and kept inside the ItemLoader. After collecting all data, the :meth:`ItemLoader.load_item` method is called to populate and get the populated :class:`~scrapy.item.Item` object.  That's when the output processor is called with the data previously collected (and processed using the input processor). The result of the output processor is the final value that gets assigned to the item."
msgstr ""

#: ../../topics/loaders.rst:96
msgid "Let's see an example to illustrate how the input and output processors are called for a particular field (the same applies for any other field)::"
msgstr ""

#: ../../topics/loaders.rst:106
msgid "So what happens is:"
msgstr ""

#: ../../topics/loaders.rst:108
msgid "Data from ``xpath1`` is extracted, and passed through the *input processor* of the ``name`` field. The result of the input processor is collected and kept in the Item Loader (but not yet assigned to the item)."
msgstr ""

#: ../../topics/loaders.rst:112
msgid "Data from ``xpath2`` is extracted, and passed through the same *input processor* used in (1). The result of the input processor is appended to the data collected in (1) (if any)."
msgstr ""

#: ../../topics/loaders.rst:116
msgid "This case is similar to the previous ones, except that the data is extracted from the ``css`` CSS selector, and passed through the same *input processor* used in (1) and (2). The result of the input processor is appended to the data collected in (1) and (2) (if any)."
msgstr ""

#: ../../topics/loaders.rst:121
msgid "This case is also similar to the previous ones, except that the value to be collected is assigned directly, instead of being extracted from a XPath expression or a CSS selector. However, the value is still passed through the input processors. In this case, since the value is not iterable it is converted to an iterable of a single element before passing it to the input processor, because input processor always receive iterables."
msgstr ""

#: ../../topics/loaders.rst:129
msgid "The data collected in steps (1), (2), (3) and (4) is passed through the *output processor* of the ``name`` field. The result of the output processor is the value assigned to the ``name`` field in the item."
msgstr ""

#: ../../topics/loaders.rst:134
msgid "It's worth noticing that processors are just callable objects, which are called with the data to be parsed, and return a parsed value. So you can use any function as input or output processor. The only requirement is that they must accept one (and only one) positional argument, which will be an iterable."
msgstr ""

#: ../../topics/loaders.rst:139
msgid "Processors no longer need to be methods."
msgstr ""

#: ../../topics/loaders.rst:142
msgid "Both input and output processors must receive an iterable as their first argument. The output of those functions can be anything. The result of input processors will be appended to an internal list (in the Loader) containing the collected values (for that field). The result of the output processors is the value that will be finally assigned to the item."
msgstr ""

#: ../../topics/loaders.rst:148
msgid "The other thing you need to keep in mind is that the values returned by input processors are collected internally (in lists) and then passed to output processors to populate the fields."
msgstr ""

#: ../../topics/loaders.rst:152
msgid "Last, but not least, Scrapy comes with some :ref:`commonly used processors <topics-loaders-available-processors>` built-in for convenience."
msgstr ""

#: ../../topics/loaders.rst:158
msgid "Declaring Item Loaders"
msgstr ""

#: ../../topics/loaders.rst:160
msgid "Item Loaders are declared like Items, by using a class definition syntax. Here is an example::"
msgstr ""

#: ../../topics/loaders.rst:177
msgid "As you can see, input processors are declared using the ``_in`` suffix while output processors are declared using the ``_out`` suffix. And you can also declare a default input/output processors using the :attr:`ItemLoader.default_input_processor` and :attr:`ItemLoader.default_output_processor` attributes."
msgstr ""

#: ../../topics/loaders.rst:186
msgid "Declaring Input and Output Processors"
msgstr ""

#: ../../topics/loaders.rst:188
msgid "As seen in the previous section, input and output processors can be declared in the Item Loader definition, and it's very common to declare input processors this way. However, there is one more place where you can specify the input and output processors to use: in the :ref:`Item Field <topics-items-fields>` metadata. Here is an example::"
msgstr ""

#: ../../topics/loaders.rst:219
msgid "The precedence order, for both input and output processors, is as follows:"
msgstr ""

#: ../../topics/loaders.rst:221
msgid "Item Loader field-specific attributes: ``field_in`` and ``field_out`` (most precedence)"
msgstr ""

#: ../../topics/loaders.rst:223
msgid "Field metadata (``input_processor`` and ``output_processor`` key)"
msgstr ""

#: ../../topics/loaders.rst:224
msgid "Item Loader defaults: :meth:`ItemLoader.default_input_processor` and :meth:`ItemLoader.default_output_processor` (least precedence)"
msgstr ""

#: ../../topics/loaders.rst:227
msgid "See also: :ref:`topics-loaders-extending`."
msgstr ""

#: ../../topics/loaders.rst:232
msgid "Item Loader Context"
msgstr ""

#: ../../topics/loaders.rst:234
msgid "The Item Loader Context is a dict of arbitrary key/values which is shared among all input and output processors in the Item Loader. It can be passed when declaring, instantiating or using Item Loader. They are used to modify the behaviour of the input/output processors."
msgstr ""

#: ../../topics/loaders.rst:239
msgid "For example, suppose you have a function ``parse_length`` which receives a text value and extracts a length from it::"
msgstr ""

#: ../../topics/loaders.rst:247
msgid "By accepting a ``loader_context`` argument the function is explicitly telling the Item Loader that it's able to receive an Item Loader context, so the Item Loader passes the currently active context when calling it, and the processor function (``parse_length`` in this case) can thus use them."
msgstr ""

#: ../../topics/loaders.rst:252
msgid "There are several ways to modify Item Loader context values:"
msgstr ""

#: ../../topics/loaders.rst:254
msgid "By modifying the currently active Item Loader context (:attr:`~ItemLoader.context` attribute)::"
msgstr ""

#: ../../topics/loaders.rst:260
msgid "On Item Loader instantiation (the keyword arguments of Item Loader ``__init__`` method are stored in the Item Loader context)::"
msgstr ""

#: ../../topics/loaders.rst:265
msgid "On Item Loader declaration, for those input/output processors that support instantiating them with an Item Loader context. :class:`~processor.MapCompose` is one of them::"
msgstr ""

#: ../../topics/loaders.rst:274
msgid "ItemLoader objects"
msgstr ""

#: ../../topics/loaders.rst:278
msgid "Return a new Item Loader for populating the given Item. If no item is given, one is instantiated automatically using the class in :attr:`default_item_class`."
msgstr ""

#: ../../topics/loaders.rst:282
msgid "When instantiated with a ``selector`` or a ``response`` parameters the :class:`ItemLoader` class provides convenient mechanisms for extracting data from web pages using :ref:`selectors <topics-selectors>`."
msgstr ""

#: ../../topics/loaders.rst:0
#: ../../topics/loaders.rst:0
#: ../../topics/loaders.rst:0
#: ../../topics/loaders.rst:0
#: ../../topics/loaders.rst:0
#: ../../topics/loaders.rst:0
msgid "Parameters"
msgstr ""

#: ../../topics/loaders.rst:286
msgid "The item instance to populate using subsequent calls to :meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css`, or :meth:`~ItemLoader.add_value`."
msgstr ""

#: ../../topics/loaders.rst:291
msgid "The selector to extract data from, when using the :meth:`add_xpath` (resp. :meth:`add_css`) or :meth:`replace_xpath` (resp. :meth:`replace_css`) method."
msgstr ""

#: ../../topics/loaders.rst:296
msgid "The response used to construct the selector using the :attr:`default_selector_class`, unless the selector argument is given, in which case this argument is ignored."
msgstr ""

#: ../../topics/loaders.rst:301
msgid "The item, selector, response and the remaining keyword arguments are assigned to the Loader context (accessible through the :attr:`context` attribute)."
msgstr ""

#: ../../topics/loaders.rst:304
msgid ":class:`ItemLoader` instances have the following methods:"
msgstr ""

#: ../../topics/loaders.rst:308
msgid "Process the given ``value`` by the given ``processors`` and keyword arguments."
msgstr ""

#: ../../topics/loaders.rst:311
msgid "Available keyword arguments:"
msgstr ""

#: ../../topics/loaders.rst:313
msgid "a regular expression to use for extracting data from the given value using :meth:`~scrapy.utils.misc.extract_regex` method, applied before processors"
msgstr ""

#: ../../topics/loaders.rst:318
#: ../../topics/loaders.rst:671
msgid "Examples:"
msgstr ""

#: ../../topics/loaders.rst:326
msgid "Process and then add the given ``value`` for the given field."
msgstr ""

#: ../../topics/loaders.rst:328
msgid "The value is first passed through :meth:`get_value` by giving the ``processors`` and ``kwargs``, and then passed through the :ref:`field input processor <topics-loaders-processors>` and its result appended to the data collected for that field. If the field already contains collected data, the new data is added."
msgstr ""

#: ../../topics/loaders.rst:334
msgid "The given ``field_name`` can be ``None``, in which case values for multiple fields may be added. And the processed value should be a dict with field_name mapped to values."
msgstr ""

#: ../../topics/loaders.rst:338
#: ../../topics/loaders.rst:363
#: ../../topics/loaders.rst:381
#: ../../topics/loaders.rst:406
#: ../../topics/loaders.rst:424
msgid "Examples::"
msgstr ""

#: ../../topics/loaders.rst:348
msgid "Similar to :meth:`add_value` but replaces the collected data with the new value instead of adding it."
msgstr ""

#: ../../topics/loaders.rst:352
msgid "Similar to :meth:`ItemLoader.get_value` but receives an XPath instead of a value, which is used to extract a list of unicode strings from the selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../../topics/loaders.rst:356
#: ../../topics/loaders.rst:378
msgid "the XPath to extract data from"
msgstr ""

#: ../../topics/loaders.rst:359
msgid "a regular expression to use for extracting data from the selected XPath region"
msgstr ""

#: ../../topics/loaders.rst:372
msgid "Similar to :meth:`ItemLoader.add_value` but receives an XPath instead of a value, which is used to extract a list of unicode strings from the selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../../topics/loaders.rst:376
msgid "See :meth:`get_xpath` for ``kwargs``."
msgstr ""

#: ../../topics/loaders.rst:390
msgid "Similar to :meth:`add_xpath` but replaces collected data instead of adding it."
msgstr ""

#: ../../topics/loaders.rst:395
msgid "Similar to :meth:`ItemLoader.get_value` but receives a CSS selector instead of a value, which is used to extract a list of unicode strings from the selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../../topics/loaders.rst:399
#: ../../topics/loaders.rst:421
msgid "the CSS selector to extract data from"
msgstr ""

#: ../../topics/loaders.rst:402
msgid "a regular expression to use for extracting data from the selected CSS region"
msgstr ""

#: ../../topics/loaders.rst:415
msgid "Similar to :meth:`ItemLoader.add_value` but receives a CSS selector instead of a value, which is used to extract a list of unicode strings from the selector associated with this :class:`ItemLoader`."
msgstr ""

#: ../../topics/loaders.rst:419
msgid "See :meth:`get_css` for ``kwargs``."
msgstr ""

#: ../../topics/loaders.rst:433
msgid "Similar to :meth:`add_css` but replaces collected data instead of adding it."
msgstr ""

#: ../../topics/loaders.rst:438
msgid "Populate the item with the data collected so far, and return it. The data collected is first passed through the :ref:`output processors <topics-loaders-processors>` to get the final value to assign to each item field."
msgstr ""

#: ../../topics/loaders.rst:445
msgid "Create a nested loader with an xpath selector. The supplied selector is applied relative to selector associated with this :class:`ItemLoader`. The nested loader shares the :class:`Item` with the parent :class:`ItemLoader` so calls to :meth:`add_xpath`, :meth:`add_value`, :meth:`replace_value`, etc. will behave as expected."
msgstr ""

#: ../../topics/loaders.rst:453
msgid "Create a nested loader with a css selector. The supplied selector is applied relative to selector associated with this :class:`ItemLoader`. The nested loader shares the :class:`Item` with the parent :class:`ItemLoader` so calls to :meth:`add_xpath`, :meth:`add_value`, :meth:`replace_value`, etc. will behave as expected."
msgstr ""

#: ../../topics/loaders.rst:461
msgid "Return the collected values for the given field."
msgstr ""

#: ../../topics/loaders.rst:465
msgid "Return the collected values parsed using the output processor, for the given field. This method doesn't populate or modify the item at all."
msgstr ""

#: ../../topics/loaders.rst:470
msgid "Return the input processor for the given field."
msgstr ""

#: ../../topics/loaders.rst:474
msgid "Return the output processor for the given field."
msgstr ""

#: ../../topics/loaders.rst:476
msgid ":class:`ItemLoader` instances have the following attributes:"
msgstr ""

#: ../../topics/loaders.rst:480
msgid "The :class:`~scrapy.item.Item` object being parsed by this Item Loader. This is mostly used as a property so when attempting to override this value, you may want to check out :attr:`default_item_class` first."
msgstr ""

#: ../../topics/loaders.rst:486
msgid "The currently active :ref:`Context <topics-loaders-context>` of this Item Loader."
msgstr ""

#: ../../topics/loaders.rst:491
msgid "An Item class (or factory), used to instantiate items when not given in the ``__init__`` method."
msgstr ""

#: ../../topics/loaders.rst:496
msgid "The default input processor to use for those fields which don't specify one."
msgstr ""

#: ../../topics/loaders.rst:501
msgid "The default output processor to use for those fields which don't specify one."
msgstr ""

#: ../../topics/loaders.rst:506
msgid "The class used to construct the :attr:`selector` of this :class:`ItemLoader`, if only a response is given in the ``__init__`` method. If a selector is given in the ``__init__`` method this attribute is ignored. This attribute is sometimes overridden in subclasses."
msgstr ""

#: ../../topics/loaders.rst:513
msgid "The :class:`~scrapy.selector.Selector` object to extract data from. It's either the selector given in the ``__init__`` method or one created from the response given in the ``__init__`` method using the :attr:`default_selector_class`. This attribute is meant to be read-only."
msgstr ""

#: ../../topics/loaders.rst:522
msgid "Nested Loaders"
msgstr ""

#: ../../topics/loaders.rst:524
msgid "When parsing related values from a subsection of a document, it can be useful to create nested loaders.  Imagine you're extracting details from a footer of a page that looks something like:"
msgstr ""

#: ../../topics/loaders.rst:528
#: ../../topics/loaders.rst:539
#: ../../topics/loaders.rst:551
msgid "Example::"
msgstr ""

#: ../../topics/loaders.rst:536
msgid "Without nested loaders, you need to specify the full xpath (or css) for each value that you wish to extract."
msgstr ""

#: ../../topics/loaders.rst:547
msgid "Instead, you can create a nested loader with the footer selector and add values relative to the footer.  The functionality is the same but you avoid repeating the footer selector."
msgstr ""

#: ../../topics/loaders.rst:561
msgid "You can nest loaders arbitrarily and they work with either xpath or css selectors. As a general guideline, use nested loaders when they make your code simpler but do not go overboard with nesting or your parser can become difficult to read."
msgstr ""

#: ../../topics/loaders.rst:568
msgid "Reusing and extending Item Loaders"
msgstr ""

#: ../../topics/loaders.rst:570
msgid "As your project grows bigger and acquires more and more spiders, maintenance becomes a fundamental problem, especially when you have to deal with many different parsing rules for each spider, having a lot of exceptions, but also wanting to reuse the common processors."
msgstr ""

#: ../../topics/loaders.rst:575
msgid "Item Loaders are designed to ease the maintenance burden of parsing rules, without losing flexibility and, at the same time, providing a convenient mechanism for extending and overriding them. For this reason Item Loaders support traditional Python class inheritance for dealing with differences of specific spiders (or groups of spiders)."
msgstr ""

#: ../../topics/loaders.rst:581
msgid "Suppose, for example, that some particular site encloses their product names in three dashes (e.g. ``---Plasma TV---``) and you don't want to end up scraping those dashes in the final product names."
msgstr ""

#: ../../topics/loaders.rst:585
msgid "Here's how you can remove those dashes by reusing and extending the default Product Item Loader (``ProductLoader``)::"
msgstr ""

#: ../../topics/loaders.rst:597
msgid "Another case where extending Item Loaders can be very helpful is when you have multiple source formats, for example XML and HTML. In the XML version you may want to remove ``CDATA`` occurrences. Here's an example of how to do it::"
msgstr ""

#: ../../topics/loaders.rst:608
msgid "And that's how you typically extend input processors."
msgstr ""

#: ../../topics/loaders.rst:610
msgid "As for output processors, it is more common to declare them in the field metadata, as they usually depend only on the field and not on each specific site parsing rule (as input processors do). See also: :ref:`topics-loaders-processors-declaring`."
msgstr ""

#: ../../topics/loaders.rst:615
msgid "There are many other possible ways to extend, inherit and override your Item Loaders, and different Item Loaders hierarchies may fit better for different projects. Scrapy only provides the mechanism; it doesn't impose any specific organization of your Loaders collection - that's up to you and your project's needs."
msgstr ""

#: ../../topics/loaders.rst:624
msgid "Available built-in processors"
msgstr ""

#: ../../topics/loaders.rst:629
msgid "Even though you can use any callable function as input and output processors, Scrapy provides some commonly used processors, which are described below. Some of them, like the :class:`MapCompose` (which is typically used as input processor) compose the output of several functions executed in order, to produce the final parsed value."
msgstr ""

#: ../../topics/loaders.rst:635
msgid "Here is a list of all built-in processors:"
msgstr ""

#: ../../topics/loaders.rst:639
msgid "The simplest processor, which doesn't do anything. It returns the original values unchanged. It doesn't receive any ``__init__`` method arguments, nor does it accept Loader contexts."
msgstr ""

#: ../../topics/loaders.rst:643
#: ../../topics/loaders.rst:656
#: ../../topics/loaders.rst:692
#: ../../topics/loaders.rst:756
msgid "Example:"
msgstr ""

#: ../../topics/loaders.rst:652
msgid "Returns the first non-null/non-empty value from the values received, so it's typically used as an output processor to single-valued fields. It doesn't receive any ``__init__`` method arguments, nor does it accept Loader contexts."
msgstr ""

#: ../../topics/loaders.rst:665
msgid "Returns the values joined with the separator given in the ``__init__`` method, which defaults to ``u' '``. It doesn't accept Loader contexts."
msgstr ""

#: ../../topics/loaders.rst:668
msgid "When using the default separator, this processor is equivalent to the function: ``u' '.join``"
msgstr ""

#: ../../topics/loaders.rst:683
msgid "A processor which is constructed from the composition of the given functions. This means that each input value of this processor is passed to the first function, and the result of that function is passed to the second function, and so on, until the last function returns the output value of this processor."
msgstr ""

#: ../../topics/loaders.rst:689
msgid "By default, stop process on ``None`` value. This behaviour can be changed by passing keyword argument ``stop_on_none=False``."
msgstr ""

#: ../../topics/loaders.rst:699
msgid "Each function can optionally receive a ``loader_context`` parameter. For those which do, this processor will pass the currently active :ref:`Loader context <topics-loaders-context>` through that parameter."
msgstr ""

#: ../../topics/loaders.rst:703
msgid "The keyword arguments passed in the ``__init__`` method are used as the default Loader context values passed to each function call. However, the final Loader context values passed to functions are overridden with the currently active Loader context accessible through the :meth:`ItemLoader.context` attribute."
msgstr ""

#: ../../topics/loaders.rst:711
msgid "A processor which is constructed from the composition of the given functions, similar to the :class:`Compose` processor. The difference with this processor is the way internal results are passed among functions, which is as follows:"
msgstr ""

#: ../../topics/loaders.rst:716
msgid "The input value of this processor is *iterated* and the first function is applied to each element. The results of these function calls (one for each element) are concatenated to construct a new iterable, which is then used to apply the second function, and so on, until the last function is applied to each value of the list of values collected so far. The output values of the last function are concatenated together to produce the output of this processor."
msgstr ""

#: ../../topics/loaders.rst:723
msgid "Each particular function can return a value or a list of values, which is flattened with the list of values returned by the same function applied to the other input values. The functions can also return ``None`` in which case the output of that function is ignored for further processing over the chain."
msgstr ""

#: ../../topics/loaders.rst:729
msgid "This processor provides a convenient way to compose functions that only work with single values (instead of iterables). For this reason the :class:`MapCompose` processor is typically used as input processor, since data is often extracted using the :meth:`~scrapy.selector.Selector.extract` method of :ref:`selectors <topics-selectors>`, which returns a list of unicode strings."
msgstr ""

#: ../../topics/loaders.rst:736
msgid "The example below should clarify how it works:"
msgstr ""

#: ../../topics/loaders.rst:746
msgid "As with the Compose processor, functions can receive Loader contexts, and ``__init__`` method keyword arguments are used as default context values. See :class:`Compose` processor for more info."
msgstr ""

#: ../../topics/loaders.rst:752
msgid "Queries the value using the json path provided to the ``__init__`` method and returns the output. Requires jmespath (https://github.com/jmespath/jmespath.py) to run. This processor takes only one input at a time."
msgstr ""

#: ../../topics/loaders.rst:765
msgid "Working with Json:"
msgstr ""
